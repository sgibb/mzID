{
    "contents" : "#' @include generics.R\nNULL\n\n#' A Class\nsetClass(\n  'mzIDparameters',\n  representation=representation(\n    software='data.frame',\n    rawFile='data.frame',\n    databaseFile='character',\n    idFile='character',\n    parameters='list'\n    ),\n  prototype=prototype(\n    software=data.frame(),\n    rawFile=data.frame(),\n    databaseFile=character(),\n    idFile=character(),\n    parameters=list())\n  )\nsetMethod(\n  'show', 'mzIDparameters',\n  function(object){\n    if(length(object) == 0){\n      cat('An empty mzIDparameters object\\n')\n    } else {\n      cat('An mzIDparameters object:\\n\\n')\n      cat('Software used:\\t', object@software$name[1], ' (version: ', object@software$version[1], ')\\n', sep='')\n      if(nrow(object@software) > 1){\n        for(i in 2:nrow(object@software)){\n          cat('\\t\\t\\t\\t', object@software$name[i], ' (version ', object@software$version[i], ')\\n', sep='')\n        }\n      } else {}\n      if(nrow(object@rawFile) == 1){\n        cat('\\nRawfile:\\t\\t', object@rawFile$location[1], '\\n', sep='')        \n      } else {\n        cat('\\nRawfiles:\\t\\t', object@rawFile$location[1], '\\n', sep='')\n        for(i in 2:nrow(object@rawFile)){\n          cat('\\t\\t\\t\\t', object@rawFile$location[i], '\\n', sep='')\n        }\n      }\n      cat('\\nDatabase:\\t\\t', object@databaseFile, '\\n', sep='')\n    }\n  }\n  )\nsetMethod(\n  'length', 'mzIDparameters',\n  function(x){\n    nrow(x@rawFile)\n  }\n  )\n\n#' Parse parameter information from an mzIdentML file\n#' \n#' Extracts the information specific to how the peptide identification was carried out.\n#' \n#' @param file The path to the mzIdentML file\n#' @param doc\nmzIDparameters <- function(file, doc, ns){\n  if(missing(doc)){\n    new(Class='mzIDparameters')\n  } else {\n    software <- data.frame(t(xpathSApply(doc, '/x:MzIdentML/x:AnalysisSoftwareList/x:AnalysisSoftware', namespaces=ns, fun=xmlAttrs)), stringsAsFactors=FALSE)\n    idFile <- file\n    rawFile <- data.frame(t(xpathSApply(doc, '/x:MzIdentML/x:DataCollection/x:Inputs/x:SpectraData', namespaces=ns, fun=xmlAttrs)), stringsAsFactors=FALSE)\n    databaseFile <- as.vector(unlist(getNodeSet(doc, '/x:MzIdentML/x:DataCollection/x:Inputs/x:SearchDatabase/@location', namespaces=ns)))\n    userPar <- xpathSApply(doc, '/x:MzIdentML/x:AnalysisProtocolCollection/x:SpectrumIdentificationProtocol/x:AdditionalSearchParams/x:userParam', namespaces=ns, fun=xmlAttrs)\n    parameters <- split(userPar['value', ], 1:length(userPar['value',]))\n    names(parameters) <- userPar['name',]\n    parameters <- lapply(parameters, type.convert)\n    parameters$Enzymes <- data.frame(\n      Name=xpathSApply(doc, '/x:MzIdentML/x:AnalysisProtocolCollection/x:SpectrumIdentificationProtocol/x:Enzymes/x:Enzyme/x:EnzymeName/x:cvParam',namespaces=ns, xmlAttrs)['name', ], \n      semiSpecific=as.logical(getNodeSet(doc, '/x:MzIdentML/x:AnalysisProtocolCollection/x:SpectrumIdentificationProtocol/x:Enzymes/x:Enzyme/@semiSpecific', namespaces=ns))\n    )\n    parameters$ParentTolerance <- data.frame(t(xpathSApply(doc, '/x:MzIdentML/x:AnalysisProtocolCollection/x:SpectrumIdentificationProtocol/x:ParentTolerance/x:cvParam', namespaces=ns, fun=xmlAttrs))[,c('value', 'unitName', 'name')], stringsAsFactors=FALSE)\n    parameters$ParentTolerance <- data.frame(lapply(as.list(parameters$ParentTolerance), type.convert, as.is=TRUE), stringsAsFactors=FALSE)\n    parameters$ModificationParams <- data.frame(t(xpathSApply(doc, '/x:MzIdentML/x:AnalysisProtocolCollection/x:SpectrumIdentificationProtocol/x:ModificationParams/x:SearchModification', namespaces=ns, fun=xmlAttrs)), stringsAsFactors=FALSE)\n    parameters$ModificationParams <- data.frame(lapply(as.list(parameters$ModificationParams), type.convert, as.is=TRUE), stringsAsFactors=FALSE)\n    parameters$ModificationParams$name <- unlist(getNodeSet(doc, '/x:MzIdentML/x:AnalysisProtocolCollection/x:SpectrumIdentificationProtocol/x:ModificationParams/x:SearchModification/x:cvParam/@name', namespaces=ns))\n    new(Class='mzIDparameters', software=software, rawFile=rawFile, databaseFile=databaseFile, idFile=idFile, parameters=parameters)\n  }\n}",
    "created" : 1365606126556.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2653506113",
    "id" : "4D40135F",
    "lastKnownWriteTime" : 1365660981,
    "path" : "~/Dropbox/GitHub/mzID/R/mzIDparameters.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}