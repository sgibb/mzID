{
    "contents" : "#' @include generics.R\n#' @include mzIDdatabase.R\n#' @include mzIDevidence.R\n#' @include mzIDparameters.R\n#' @include mzIDpeptides.R\n#' @include mzIDpsm.R\nNULL\n\n#' A class to contain data from mzIdentML-files\n#'\n#' This class stores all parsed information from mzIdentML files\n#'\n#' The mzID class stores information in a subset of classes, each class having its own slot. While\n#' These classes should not need to be accessed directly, but descriptions of their content is\n#' delegated to each respective class.\n#' \n#' @section Slots\n#' \n#'\n#' @exportClass mzID-class\n#' @rdname mzID-class\n#' \nsetClass(\n\t'mzID',\n\trepresentation=representation(\n\t\tparameters='mzIDparameters',\n    psm='mzIDpsm',\n    peptides='mzIDpeptides',\n    evidence='mzIDevidence',\n    database='mzIDdatabase'\n    ),\n  prototype=prototype(\n    parameters=mzIDparameters(),\n    psm=mzIDpsm(),\n    peptides=mzIDpeptides(),\n    evidence=mzIDevidence(),\n    database=mzIDdatabase()\n    )\n  )\nsetMethod(\n  'show', 'mzID',\n  function(object){\n    if(length(object) == 0){\n      cat('An empty mzID object\\n')\n    } else {\n      cat('An mzID object\\n\\n')\n      cat('Software used:\\t', object@parameters@software$name[1], ' (version: ', object@parameters@software$version[1], ')\\n', sep='')\n      if(nrow(object@parameters@software) > 1){\n        for(i in 2:nrow(object@parameters@software)){\n          cat('\\t\\t\\t\\t', object@parameters@software$name[i], ' (version ', object@parameters@software$version[i], ')\\n', sep='')\n        }\n      } else {}\n      if(nrow(object@parameters@rawFile) == 1){\n        cat('Rawfile:\\t\\t', object@parameters@rawFile$location[1], '\\n', sep='')        \n      } else {\n        cat('Rawfiles:\\t\\t', object@parameters@rawFile$location[1], '\\n', sep='')\n        for(i in 2:nrow(object@parameters@rawFile)){\n          cat('\\t\\t\\t\\t', object@parameters@rawFile$location[i], '\\n', sep='')\n        }\n      }\n      cat('Database:\\t\\t', object@parameters@databaseFile, '\\n\\n', sep='')\n      cat('Number of scans:', nrow(object@psm@scans), '\\n')\n      cat('Number of PSM\\'s:', nrow(object@psm@id), '\\n')\n    }\n  })\nsetMethod(\n  'length', 'mzID',\n  function(x){\n    length(x@parameters)\n  }\n  )\n\n#' Parse an mzIdentML file\n#' \n#' This function takes a single mzIdentML file and parses it into an mzID object.\n#' \n#' The mzID function uses the XML package to read the content of an mzIdentML file and store it in\n#' an mzID object. Unlike how mzR handles mzML files, mzID parses everything in one chunk. Memory\n#' can thus be a problem for very big datasets, but as mzIdentML files are not indexed, it is\n#' ineficient to access the data dynamically.\n#' \n#' @param file A character string giving the location of the mzIdentML file to be parsed\n#' \n#' @return An mzID object\n#' \n#' @export\nmzID <- function(file){\n  if(missing(file)){\n    new(Class='mzID')\n  } else {\n    doc = xmlInternalTreeParse(file)\n    ns=c(x=\"http://psidev.info/psi/pi/mzIdentML/1.1\")\n    new(Class='mzID',\n        parameters=mzIDparameters(file, doc, ns),\n        psm=mzIDpsm(doc, ns),\n        peptides=mzIDpeptides(doc, ns),\n        evidence=mzIDevidence(doc, ns),\n        database=mzIDdatabase(doc, ns)\n        )\n  }\n}",
    "created" : 1365597101342.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3262008940",
    "id" : "8A42D1DF",
    "lastKnownWriteTime" : 1365608918,
    "path" : "~/Dropbox/GitHub/mzID/R/mzID.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}